---
swagger: "2.0"
info:
  description: "This is a sample server User server.  You can find out more about\
    \ Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\
    \  For this sample, you can use the api key `special-key` to test the authorization\
    \ filters."
  version: "1.0.7"
  title: "Swagger User"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "user.swagger.io"
basePath: "/v2" 
tags:
- name: "user"
  description: "Operations about users"
  externalDocs:
    description: "Find out more about users"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /user:
    get:
      tags:
      - "user"
      summary: "Get all users"
      description: "Returns a list of all users"
      operationId: "getAllUsers"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
  /user/{id}:
    get:
      tags:
      - "user"
      summary: "Get user by id"
      description: "Returns a single user by id"
      operationId: "getUserByUsername"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The name of the user to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid id supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Update user"
      description: "Updates an existing user"
      operationId: "updateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The name of the user to update"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user data"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "Deletes a user"
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The name of the user to delete"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid id supplied"
        404:
          description: "User not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "Creates a new user"
      operationId: "createUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object to be created"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
definitions:
  User:
    type: "object"
    properties:
      firstname:
        type: "string"
      lastname:
        type: "string"
      gender:
        type: "string"
      age:
        type: "integer"
        format: "int32"
    required:
    - "firstname"
    - "lastname"
